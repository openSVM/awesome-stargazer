# NEAR (53 repositories)

stevengj/nlopt: library for nonlinear optimization, wrapping many algorithms for global and local, constrained or unconstrained, optimization - https://github.com/stevengj/nlopt
pramalhe/RedoDB: The world's first wait-free KV store with generic durable linearizable transactions - https://github.com/pramalhe/RedoDB
NVlabs/Sana: SANA: Efficient High-Resolution Image Synthesis with Linear Diffusion Transformer - https://github.com/NVlabs/Sana
h2oai/h2o-3: H2O is an Open Source, Distributed, Fast & Scalable Machine Learning Platform: Deep Learning, Gradient Boosting (GBM) & XGBoost, Random Forest, Generalized Linear Modeling (GLM with Elastic Net), K-Means, PCA, Generalized Additive Models (GAM), RuleFit, Support Vector Machine (SVM), Stacked Ensembles, Automatic Machine Learning (AutoML), etc. - https://github.com/h2oai/h2o-3
cgtuebingen/Product-Quantization-Tree: GPU-based large scale Approx. Nearest Neighbor Search, accepted at CVPR 2016 - https://github.com/cgtuebingen/Product-Quantization-Tree
vkgnandhu177/Bayesian-Regression-and-Bitcoin: # Bayesian-Regression-to-Predict-Bitcoin-Price-Variations Predicting the price variations of bitcoin, a virtual cryptographic currency. These predictions could be used as the foundation of a bitcoin trading strategy. To make these predictions, we will have to familiarize ourself with a machine learning technique, Bayesian Regression, and implement this technique in Python.  # Datasets We have the datasets in the data folder. The original raw data can be found here: http://api.bitcoincharts.com/v1/csv/. The datasets from this site have three attributes:   (1) time in epoch,   (2) price in USD per bitcoin, and   (3) bitcoin amount in a transaction (buy/sell).   However, only the first two attributes are relevant to this project.  To make the data to have evenly space records, we took all the records within a 20 second window and replaced it by a single record as the average of all the transaction prices in that window. Not every 20 second window had a record; therefore those missing entries were filled using the prices of the previous 20 observations and assuming a Gaussian distribution. The raw data that has been cleaned is given in the file dataset.csv  Finally, as discussed in the paper, the data was divided into a total of 9 different datasets. The whole dataset is partitioned into three equally sized (50 price variations in each) subsets: train1, train2, and test. The train sets are used for training a linear model, while the test set is for evaluation of the model. There are three csv files associated with each subset of data: *_90.csv, *_180.csv, and *_360.csv. In _90.csv, for example, each line represents a vector of length 90 where the elements are 30 minute worth of bitcoin price variations (since we have 20 second intervals) and a price variation in the 91st column. Similarly, the *_180.csv represents 60 minutes of prices and *_360.csv represents 120 minutes of prices.  # Project Requirements We are expected to implement the Bayesian Regression model to predict the future price variation of bitcoin as described in the reference paper. The main parts to focus on are Equation 6 and the Predicting Price Change section.  # Logic in bitcoin.py 1. Compute the price variations (Œîp1, Œîp2, and Œîp3) for train2 using train1 as input to the Bayesian Regression equation (Equations 6). Make sure to use the similarity metric (Equation 9) in place of the Euclidean distance in Bayesian Regression (Equation 6).  2. Compute the linear regression parameters (w0, w1, w2, w3) by finding the best linear fit (Equation 8). Here you will need to use the ols function of statsmodels.formula.api. Your model should be fit using Œîp1, Œîp2, and Œîp3 as the covariates. Note: the bitcoin order book data was not available, so you do not have to worry about the rw4 term.  3. Use the linear regression model computed in Step 2 and Bayesian Regression estimates, to predict the price variations for the test dataset. Bayesian Regression estimates for test dataset are computed in the same way as they are computed for train2 dataset ‚Äì using train1 as an input.  4. Once the price variations are predicted, compute the mean squared error (MSE) for the test dataset (the test dataset has 50 vectors => 50 predictions). - https://github.com/vkgnandhu177/Bayesian-Regression-and-Bitcoin
Dao-AILab/cutlass: CUDA Templates for Linear Algebra Subroutines - https://github.com/Dao-AILab/cutlass
gboehl/econpizza: Solve nonlinear heterogeneous agent models - https://github.com/gboehl/econpizza
amacaluso/Quantum-Splines-for-Non-Linear-Approximations: This repository contains the code to reproduce the results in the paper Quantum Splines for Non-Linear Approximation, under publication for the ACM International Conference on Computing Frontiers 2020. - https://github.com/amacaluso/Quantum-Splines-for-Non-Linear-Approximations
kython28/wekua: Linear Algebra and Deep Learning Zig library with GPGPU and heterogeneous computing - https://github.com/kython28/wekua
Liu-xiandong/How_to_optimize_in_GPU: This is a series of GPU optimization topics. Here we will introduce  how to optimize the CUDA kernel in detail.  I will introduce several basic kernel optimizations, including: elementwise, reduce, sgemv, sgemm, etc. The performance of these kernels is basically at or near the theoretical limit. - https://github.com/Liu-xiandong/How_to_optimize_in_GPU
near/near-sandbox: Easily run a local NEAR blockchain - https://github.com/near/near-sandbox
near/create-near-app: Create a starter app hooked up to the NEAR blockchain - https://github.com/near/create-near-app
SparseLinearAlgebra/cuBool: Sparse linear Boolean algebra for Nvidia Cuda - https://github.com/SparseLinearAlgebra/cuBool
cuguilke/spike_pstrsv: A Parallel Multithreaded Sparse Triangular Linear System Solver - https://github.com/cuguilke/spike_pstrsv
real-space/AngstromCube: A parallel and GPU-accelerated Code for Real-Space All-Electron Linear-Scaling Density Functional Theory - https://github.com/real-space/AngstromCube
SparseLinearAlgebra/spla: An open-source generalized sparse linear algebra library with vendor-agnostic GPUs accelerated computations  - https://github.com/SparseLinearAlgebra/spla
OneSparse/OneSparse: Accelerated Sparse Linear Algebra with Postgres and SuiteSparse - https://github.com/OneSparse/OneSparse
near/near-workspaces-rs: Write tests once, run them both on NEAR TestNet and a controlled NEAR Sandbox local environment via Rust - https://github.com/near/near-workspaces-rs
JohnEarnest/Mako: A simple virtual game console - https://github.com/JohnEarnest/Mako
bitshifter/glam-rs: A simple and fast linear algebra library for games and graphics - https://github.com/bitshifter/glam-rs
kooparse/zalgebra: Linear algebra library for games and real-time graphics. - https://github.com/kooparse/zalgebra
near/near-cli-rs: near CLI is your human-friendly companion that helps to interact with NEAR Protocol from command line. - https://github.com/near/near-cli-rs
google/nearby: üêøÔ∏è A collection of projects focused on connectivity that enable building cross-device experiences. - https://github.com/google/nearby
near-daos/sputnik-dao-contract: Smart contracts for https://app.astrodao.com - https://github.com/near-daos/sputnik-dao-contract
jito-foundation/distributor: A merkle-based token distributor for the Solana network that allows distributing a combination of unlocked and linearly unlocked tokens. - https://github.com/jito-foundation/distributor
dakk/dqpu: A Web3-Powered (Near), Decentralized Quantum Simulator with Verifiable Computation - https://github.com/dakk/dqpu
softstack/Smart-Contract-Security-Audits: Certified Smart Contract Audits for Ethereum, Solana, Near, Cardano, Aptos, Sui, Binance Smart Chain, Fantom, EOS, Tezos and more - https://github.com/softstack/Smart-Contract-Security-Audits
near/borsh: Binary Object Representation Serializer for Hashing - https://github.com/near/borsh
crate/crate: CrateDB is a distributed and scalable SQL database for storing and analyzing massive amounts of data in near real-time, even with complex queries. It is PostgreSQL-compatible, and based on Lucene. - https://github.com/crate/crate
StarRocks/starrocks: The world's fastest open query engine for sub-second analytics both on and off the data lakehouse. With the flexibility to support nearly any scenario, StarRocks provides best-in-class performance for multi-dimensional analytics, real-time analytics, and ad-hoc queries. A Linux Foundation project. - https://github.com/StarRocks/starrocks
hora-search/hora: üöÄ  efficient approximate nearest neighbor search algorithm collections library written in Rust ü¶Ä .  - https://github.com/hora-search/hora
xploitspeeds/Bookmarklet-Hacks-For-School: * READ THE README FOR INFO!! * Incoming Tags- z score statistics,find mean median mode statistics in ms excel,variance,standard deviation,linear regression,data processing,confidence  intervals,average value,probability theory,binomial distribution,matrix,random numbers,error propagation,t statistics analysis,hypothesis testing,theorem,chi square,time series,data collection,sampling,p value,scatterplots,statistics lectures,statistics tutorials,business mathematics statistics,share stock market statistics in calculator,business analytics,GTA,continuous frequency distribution,statistics mathematics in real life,modal class,n is even,n is odd,median mean of series of numbers,math help,Sujoy Krishna Das,n+1/2 element,measurement of variation,measurement of central tendency,range of numbers,interquartile range,casio fx991,casio fx82,casio fx570,casio fx115es,casio 9860,casio 9750,casio 83gt,TI BAII+ financial,casio piano,casio calculator tricks and hacks,how to cheat in exam and not get caught,grouped interval data,equation of triangle rectangle curve parabola hyperbola,graph theory,operation research(OR),numerical methods,decision making,pie chart,bar graph,computer data analysis,histogram,statistics formula,matlab tutorial,find arithmetic mean geometric mean,find population standard deviation,find sample standard deviation,how to use a graphic calculator,pre algebra,pre calculus,absolute deviation,TI Nspire,TI 84 TI83 calculator tutorial,texas instruments calculator,grouped data,set theory,IIT JEE,AIEEE,GCSE,CAT,MAT,SAT,GMAT,MBBS,JELET,JEXPO,VOCLET,Indiastudychannel,IAS,IPS,IFS,GATE,B-Tech,M-Tech,AMIE,MBA,BBA,BCA,MCA,XAT,TOEFL,CBSE,ICSE,HS,WBUT,SSC,IUPAC,Narendra Modi,Sachin Tendulkar Farewell Speech,Dhoom 3,Arvind Kejriwal,maths revision,how to score good marks in exams,how to pass math exams easily,JEE 12th physics chemistry maths PCM,JEE maths shortcut techniques,quadratic equations,competition exams tips and ticks,competition maths,govt job,JEE KOTA,college math,mean value theorem,L hospital rule,tech guru awaaz,derivation,cryptography,iphone 5 fingerprint hack,crash course,CCNA,converting fractions,solve word problem,cipher,game theory,GDP,how to earn money online on youtube,demand curve,computer science,prime factorization,LCM & GCF,gauss elimination,vector,complex numbers,number systems,vector algebra,logarithm,trigonometry,organic chemistry,electrical math problem,eigen value eigen vectors,runge kutta,gauss jordan,simpson 1/3 3/8 trapezoidal rule,solved problem example,newton raphson,interpolation,integration,differentiation,regula falsi,programming,algorithm,gauss seidal,gauss jacobi,taylor series,iteration,binary arithmetic,logic gates,matrix inverse,determinant of matrix,matrix calculator program,sex in ranchi,sex in kolkata,vogel approximation VAM optimization problem,North west NWCR,Matrix minima,Modi method,assignment problem,transportation problem,simplex,k map,boolean algebra,android,casio FC 200v 100v financial,management mathematics tutorials,net present value NPV,time value of money TVM,internal rate of return IRR Bond price,present value PV and future value FV of annuity casio,simple interest SI & compound interest CI casio,break even point,amortization calculation,HP 10b financial calculator,banking and money,income tax e filing,economics,finance,profit & loss,yield of investment bond,Sharp EL 735S,cash flow casio,re finance,insurance and financial planning,investment appraisal,shortcut keys,depreciation,discounting - https://github.com/xploitspeeds/Bookmarklet-Hacks-For-School
olive-editor/olive: Free open-source non-linear video editor - https://github.com/olive-editor/olive
near/borsh-rs: Rust implementation of Binary Object Representation Serializer for Hashing - https://github.com/near/borsh-rs
JohnEarnest/Octo: A Chip8 IDE - https://github.com/JohnEarnest/Octo
ziglibs/zlm: Zig linear mathemathics - https://github.com/ziglibs/zlm
meilisearch/arroy: An Approximate Nearest Neighbors library in Rust, based on random projections and LMDB and optimized for memory usage :boom: - https://github.com/meilisearch/arroy
austinabell/near-zig-hw: Basic example of Zig wasm smart contract on NEAR - https://github.com/austinabell/near-zig-hw
deprecated-near/rust-status-message: Set and retrieve status messages per account with this simple smart contract. - https://github.com/deprecated-near/rust-status-message
near/near-sdk-rs: Rust library for writing NEAR smart contracts - https://github.com/near/near-sdk-rs
jlblancoc/nanoflann: nanoflann: a C++11 header-only library for Nearest Neighbor (NN) search with KD-trees - https://github.com/jlblancoc/nanoflann
RedPlanetHQ/tegon: Tegon is an open-source, dev-first alternative to Jira, Linear - https://github.com/RedPlanetHQ/tegon
NVIDIA/cutlass: CUDA Templates for Linear Algebra Subroutines - https://github.com/NVIDIA/cutlass
SciCompMod/GMGPolar: High Order Geometric Multigrid for planes in curvilinear coordinates - https://github.com/SciCompMod/GMGPolar
zanellia/feasible_sqp: A solver for nonlinear programming based on a sequential quadratic programming strategy with feasible intermediate iterates. - https://github.com/zanellia/feasible_sqp
HPAC/linnea: Linnea is an experimental tool for the automatic generation of optimized code for linear algebra problems. - https://github.com/HPAC/linnea
icl-utk-edu/slate: SLATE is a distributed, GPU-accelerated, dense linear algebra library targetting current and upcoming high-performance computing (HPC) systems. It is developed as part of the U.S. Department of Energy Exascale Computing Project (ECP). - https://github.com/icl-utk-edu/slate
rally-dfs/token-bonding-curve: A fork of Solana Program Library Token Swap that implements a linear token bonding curve type - https://github.com/rally-dfs/token-bonding-curve
noot/htlp-rs: linearly homomorphic timelock puzzles implementation - https://github.com/noot/htlp-rs
near/awesome-near: Curated list of resources: examples, libraries, projects - https://github.com/near/awesome-near
near-examples/FT: Example implementations of money-like tokens, where one token is the same as any other, using the NEP-141 spec (similar to ERC-20) - https://github.com/near-examples/FT
near/nearcore: Reference client for NEAR Protocol - https://github.com/near/nearcore
