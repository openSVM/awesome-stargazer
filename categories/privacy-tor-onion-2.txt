# PRIVACY TOR ONION 2 (90 repositories)

RUCAIBox/RecSysDatasets: This is a repository of public data sources for Recommender Systems (RS). - https://github.com/RUCAIBox/RecSysDatasets
tcsenpai/DualMind: DualMind is an innovative AI conversation simulator that facilitates engaging dialogues between two AI models using the Ollama API. - https://github.com/tcsenpai/DualMind
rasbt/LLMs-from-scratch: Implement a ChatGPT-like LLM in PyTorch from scratch, step by step - https://github.com/rasbt/LLMs-from-scratch
Ronsor/riscv-zig: A RISC-V emulator written in Zig - https://github.com/Ronsor/riscv-zig
fynnfluegge/rocketnotes: ‚ú® AI-powered markdown editor - leverage LLMs with your documents - 100% local or in the cloud - https://github.com/fynnfluegge/rocketnotes
ju-bezdek/langchain-decorators: syntactic sugar üç≠ for langchain - https://github.com/ju-bezdek/langchain-decorators
jeffhj/LM-reasoning: This repository contains a collection of papers and resources on Reasoning in Large Language Models. - https://github.com/jeffhj/LM-reasoning
plastic-labs/tutor-gpt: AI tutor powered by Theory-of-Mind reasoning - https://github.com/plastic-labs/tutor-gpt
comet-ml/opik: Debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards. - https://github.com/comet-ml/opik
lipinski/awesome-machine-learning-on-graph: The repository is a curated list of various resources, including academic papers, books, courses, tools, and libraries, related to machine learning with graph data.  - https://github.com/lipinski/awesome-machine-learning-on-graph
aldrin-labs/abyssbook: first zig orderbook in history // benchmark prolly wrong its ai estimate - https://github.com/aldrin-labs/abyssbook
OpenSPG/KAG: KAG is a logical form-guided reasoning and retrieval framework based on OpenSPG engine and LLMs.  It is used to build logical reasoning and factual Q&A solutions for professional domain knowledge bases. It can effectively overcome the shortcomings of the traditional RAG vector similarity calculation model. - https://github.com/OpenSPG/KAG
modelcontextprotocol/inspector: Visual testing tool for MCP servers - https://github.com/modelcontextprotocol/inspector
cozodb/cozo: A transactional, relational-graph-vector database that uses Datalog for query. The hippocampus for AI! - https://github.com/cozodb/cozo
vectorch-ai/ScaleLLM: A high-performance inference system for large language models, designed for production environments. - https://github.com/vectorch-ai/ScaleLLM
h2oai/h2o-3: H2O is an Open Source, Distributed, Fast & Scalable Machine Learning Platform: Deep Learning, Gradient Boosting (GBM) & XGBoost, Random Forest, Generalized Linear Modeling (GLM with Elastic Net), K-Means, PCA, Generalized Additive Models (GAM), RuleFit, Support Vector Machine (SVM), Stacked Ensembles, Automatic Machine Learning (AutoML), etc. - https://github.com/h2oai/h2o-3
facebookresearch/Ego4d: Ego4d dataset repository. Download the dataset, visualize, extract features & example usage of the dataset - https://github.com/facebookresearch/Ego4d
facebookresearch/fairscale: PyTorch extensions for high performance and large scale training. - https://github.com/facebookresearch/fairscale
facebookresearch/habitat-sim: A flexible, high-performance 3D simulator for Embodied AI research. - https://github.com/facebookresearch/habitat-sim
facebookresearch/param: PArametrized Recommendation and Ai Model benchmark is a repository for development of numerous uBenchmarks as well as end to end nets for evaluation of training and inference platforms. - https://github.com/facebookresearch/param
CN-TU/machine-learning-in-ebpf: This repository contains the code for the paper "A flow-based IDS using Machine Learning in eBPF", Contact: Maximilian Bachl - https://github.com/CN-TU/machine-learning-in-ebpf
mentallyblue/ai0x: AI-powered research agent that analyzes GitHub repositories and provides technical scoring and market insights. - https://github.com/mentallyblue/ai0x
lsmod/proof-of-history-explained: code example for article: "proof of history explained" published on medium - https://github.com/lsmod/proof-of-history-explained
Quantum-Fringe-Entertainment/Ricerca: The story of a father's pursuit for his lost child. - https://github.com/Quantum-Fringe-Entertainment/Ricerca
BlackJar72/DoomlikeDungeons: A procedural multi-room dungeon generator for Minecraft - https://github.com/BlackJar72/DoomlikeDungeons
PatrickJS/awesome-cursorrules: üìÑ  Configuration files that enhance Cursor AI editor experience with custom rules and behaviors - https://github.com/PatrickJS/awesome-cursorrules
codestoryai/aide: The open-source AI-native IDE - https://github.com/codestoryai/aide
muratcankoylan/AI-Investigator: An automated AI system (Python framework) designed to analyze any type of website content and generate structured reports using Claude 3.5 Sonnet API and Firecrawl. While currently configured for enterprise AI case studies, the architecture can be adapted for various content analysis needs. - https://github.com/muratcankoylan/AI-Investigator
PINTO0309/Keras-OneClassAnomalyDetection: [5 FPS - 150 FPS] Learning Deep Features for One-Class Classification (AnomalyDetection). Corresponds RaspberryPi3. Convert to Tensorflow, ONNX, Caffe, PyTorch. Implementation by Python + OpenVINO/Tensorflow Lite. - https://github.com/PINTO0309/Keras-OneClassAnomalyDetection
debkbanerji/lego-art-remix: Powerful computer vision assisted Lego mosaic creator ¬∑ Over 1 million images created (so far!) - https://github.com/debkbanerji/lego-art-remix
bigscience-workshop/petals: üå∏ Run LLMs at home, BitTorrent-style. Fine-tuning and inference up to 10x faster than offloading - https://github.com/bigscience-workshop/petals
facebookresearch/flow_matching: A PyTorch library for implementing flow matching algorithms, featuring continuous and discrete flow matching implementations. It includes practical examples for both text and image modalities. - https://github.com/facebookresearch/flow_matching
adhikasp/mcp-git-ingest: A Model Context Protocol (MCP) server that helps read GitHub repository structure and important files. - https://github.com/adhikasp/mcp-git-ingest
hannesrudolph/mcp-ragdocs: An MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context. - https://github.com/hannesrudolph/mcp-ragdocs
mailgun/gubernator: High Performance Rate Limiting MicroService and Library - https://github.com/mailgun/gubernator
VictorTaelin/AI-scripts: Some handy AI scripts - https://github.com/VictorTaelin/AI-scripts
apache/tvm-vta: Open, Modular, Deep Learning Accelerator - https://github.com/apache/tvm-vta
harveybc/gym-fx: Forex trading simulator environment for OpenAI Gym, observations contain the order status, performance and timeseries loaded from a CSV file containing rates and indicators. Work In Progress - https://github.com/harveybc/gym-fx
NirDiamant/GenAI_Agents: This repository provides tutorials and implementations for various Generative AI Agent techniques, from basic to advanced. It serves as a comprehensive guide for building intelligent, interactive AI systems. - https://github.com/NirDiamant/GenAI_Agents
Yassine-Ag/AMLSim: The AMLSim project is intended to provide a multi-agent based simulator that generates synthetic banking transaction data together with a set of known money laundering patterns - mainly for the purpose of testing machine learning models and graph algorithms.  We welcome you to enhance this effort since the data set related to money laundering is critical to advance detection capabilities of money laundering activities.  - https://github.com/Yassine-Ag/AMLSim
shaadclt/crewAI-Multi-AI-Agents-Investment-Risk-Analysis: This project automates the process of monitoring market data, developing trading strategies, executing trades, and assessing risks using a team of specialized AI Agents from crewAI. Each agent is equipped with specific roles and goals, and they collaborate to optimize trading decisions and strategies.  - https://github.com/shaadclt/crewAI-Multi-AI-Agents-Investment-Risk-Analysis
pashpashpash/vault-ai: OP Vault ChatGPT: Give ChatGPT long-term memory using the OP Stack (OpenAI + Pinecone Vector Database). Upload your own custom knowledge base files (PDF, txt, epub, etc) using a simple React frontend. - https://github.com/pashpashpash/vault-ai
Lightning-AI/pytorch-lightning: Pretrain, finetune ANY AI model of ANY size on multiple GPUs, TPUs with zero code changes. - https://github.com/Lightning-AI/pytorch-lightning
The-FinAI/PIXIU: This repository introduces PIXIU, an open-source resource featuring the first financial large language models (LLMs), instruction tuning data, and evaluation benchmarks to holistically assess financial LLMs. Our goal is to continually push forward the open-source development of financial artificial intelligence (AI). - https://github.com/The-FinAI/PIXIU
torchgeo/torchgeo: TorchGeo: datasets, samplers, transforms, and pre-trained models for geospatial data - https://github.com/torchgeo/torchgeo
dagmawibabi/ScholarXIV: ScholArxiv is an open-source, aesthetic, minimal and AI powered app that allows users to search, read, bookmark, share, download and view summaries of academic papers from the arXiv repository. - https://github.com/dagmawibabi/ScholarXIV
open-mmlab/mmagic: OpenMMLab Multimodal Advanced, Generative, and Intelligent Creation Toolbox. Unlock the magic ü™Ñ: Generative-AI (AIGC), easy-to-use APIs, awsome model zoo, diffusion models, for text-to-image generation, image/video restoration/enhancement, etc. - https://github.com/open-mmlab/mmagic
aishwaryanr/awesome-generative-ai-guide: A one stop repository for generative AI research updates, interview resources, notebooks and much more! - https://github.com/aishwaryanr/awesome-generative-ai-guide
deepset-ai/haystack: AI orchestration framework to build customizable, production-ready LLM applications. Connect components (models, vector DBs, file converters) to pipelines or agents that can interact with your data. With advanced retrieval methods, it's best suited for building RAG, question answering, semantic search or conversational agent chatbots. - https://github.com/deepset-ai/haystack
mjzk/SolAgg: A mini Data aggregator software that collects and processes data from the Solana blockchain. The goal is to create a system capable of retrieving transaction and account data for the ongoing epoch. - https://github.com/mjzk/SolAgg
AgentOps-AI/agentops: Python SDK for AI agent monitoring, LLM cost tracking, benchmarking, and more. Integrates with most LLMs and agent frameworks including CrewAI, Agno, OpenAI Agents SDK, Langchain, Autogen, AG2, and CamelAI - https://github.com/AgentOps-AI/agentops
infiniflow/infinity: The AI-native database built for LLM applications, providing incredibly fast hybrid search of dense vector, sparse vector, tensor (multi-vector), and full-text. - https://github.com/infiniflow/infinity
AmruthaPatil/NYU-ChatBot: Creating simple chatbot using movie scripts from the Cornell Movie Dialogs Corpus based on the PyTorch Chatbot Tutorial. - https://github.com/AmruthaPatil/NYU-ChatBot
teddybryant/AI-Social-Media-Marketing-Stock-Predictor: An PyTorch AI that uses company social media marketing data to predict that company's stock changes - https://github.com/teddybryant/AI-Social-Media-Marketing-Stock-Predictor
The-Swarm-Corporation/ATLAS: ATLAS is a sophisticated real-time risk analysis system designed for institutional-grade market risk assessment. Built with high-frequency trading (HFT) capabilities and advanced machine learning techniques, ATLAS provides continuous volatility predictions and risk metrics using both historical patterns and real-time market data. - https://github.com/The-Swarm-Corporation/ATLAS
KhaledAshrafH/Riemann-Zeta: This repository contains an MPI program written in C that calculates the Riemann zeta function and evaluates its performance using MPI collective communication functions. The program approximates the value of Œ∂(3) with a given value of `s` (3 - Ap√©ry's constant). It calculates the runtime, speedup, and efficiency for different numbers of processes. - https://github.com/KhaledAshrafH/Riemann-Zeta
sail-sg/envpool: C++-based high-performance parallel environment execution engine (vectorized env) for general RL environments. - https://github.com/sail-sg/envpool
ismailfer/exchange-simulator: Exchange Simulator using Spring Boot, RestAPI, and Websockets for Order Placement, Order and Trade events, and Market Data events  - https://github.com/ismailfer/exchange-simulator
joshuaboud/gen-dataset: Command line tool to quickly generate a lot of files in a lot of directories - https://github.com/joshuaboud/gen-dataset
InfraSail/higherdb: A Rust LSM-Tree based lightweight storage engine. - https://github.com/InfraSail/higherdb
sniper00/moon: A lightweight game server framework implemented with Actor Model - https://github.com/sniper00/moon
nabil-linux-arm/Airport-Traffic-Concurrency: This repository will hold the files for the C++ project: Airport Traffic using Concurrency - https://github.com/nabil-linux-arm/Airport-Traffic-Concurrency
reborndb/qdb: A fast, high availability, fully Redis compatible store. - https://github.com/reborndb/qdb
karpathy/nanoGPT: The simplest, fastest repository for training/finetuning medium-sized GPTs. - https://github.com/karpathy/nanoGPT
OpenBMB/RepoAgent: An LLM-powered repository agent designed to assist developers and teams in generating documentation and understanding repositories quickly. - https://github.com/OpenBMB/RepoAgent
vkgnandhu177/Bayesian-Regression-and-Bitcoin: # Bayesian-Regression-to-Predict-Bitcoin-Price-Variations Predicting the price variations of bitcoin, a virtual cryptographic currency. These predictions could be used as the foundation of a bitcoin trading strategy. To make these predictions, we will have to familiarize ourself with a machine learning technique, Bayesian Regression, and implement this technique in Python.  # Datasets We have the datasets in the data folder. The original raw data can be found here: http://api.bitcoincharts.com/v1/csv/. The datasets from this site have three attributes:   (1) time in epoch,   (2) price in USD per bitcoin, and   (3) bitcoin amount in a transaction (buy/sell).   However, only the first two attributes are relevant to this project.  To make the data to have evenly space records, we took all the records within a 20 second window and replaced it by a single record as the average of all the transaction prices in that window. Not every 20 second window had a record; therefore those missing entries were filled using the prices of the previous 20 observations and assuming a Gaussian distribution. The raw data that has been cleaned is given in the file dataset.csv  Finally, as discussed in the paper, the data was divided into a total of 9 different datasets. The whole dataset is partitioned into three equally sized (50 price variations in each) subsets: train1, train2, and test. The train sets are used for training a linear model, while the test set is for evaluation of the model. There are three csv files associated with each subset of data: *_90.csv, *_180.csv, and *_360.csv. In _90.csv, for example, each line represents a vector of length 90 where the elements are 30 minute worth of bitcoin price variations (since we have 20 second intervals) and a price variation in the 91st column. Similarly, the *_180.csv represents 60 minutes of prices and *_360.csv represents 120 minutes of prices.  # Project Requirements We are expected to implement the Bayesian Regression model to predict the future price variation of bitcoin as described in the reference paper. The main parts to focus on are Equation 6 and the Predicting Price Change section.  # Logic in bitcoin.py 1. Compute the price variations (Œîp1, Œîp2, and Œîp3) for train2 using train1 as input to the Bayesian Regression equation (Equations 6). Make sure to use the similarity metric (Equation 9) in place of the Euclidean distance in Bayesian Regression (Equation 6).  2. Compute the linear regression parameters (w0, w1, w2, w3) by finding the best linear fit (Equation 8). Here you will need to use the ols function of statsmodels.formula.api. Your model should be fit using Œîp1, Œîp2, and Œîp3 as the covariates. Note: the bitcoin order book data was not available, so you do not have to worry about the rw4 term.  3. Use the linear regression model computed in Step 2 and Bayesian Regression estimates, to predict the price variations for the test dataset. Bayesian Regression estimates for test dataset are computed in the same way as they are computed for train2 dataset ‚Äì using train1 as an input.  4. Once the price variations are predicted, compute the mean squared error (MSE) for the test dataset (the test dataset has 50 vectors => 50 predictions). - https://github.com/vkgnandhu177/Bayesian-Regression-and-Bitcoin
purocean/yn: A highly extensible Markdown editor. Version control, AI Copilot, mind map, documents encryption, code snippet running, integrated terminal, chart embedding, HTML applets, Reveal.js, plug-in, and macro replacement. - https://github.com/purocean/yn
obraia/YourVision: AI-powered image editor - https://github.com/obraia/YourVision
UCSC-VLAA/story-adapter: A Training-free Iterative Framework for Long Story Visualization - https://github.com/UCSC-VLAA/story-adapter
hfwebbed/Stock-Option-Analytics: Stocks and options picking. Tries to contain predictive analytics, recommendations, and calculators. - https://github.com/hfwebbed/Stock-Option-Analytics
amilz/proof-of-x: Real-time rewards for on-chain events üèÜ 2023 Sandstorm Hackathon Winner - https://github.com/amilz/proof-of-x
teal-finance/rainbow: DeFi options comparator to detect market opportunities  with CLI (Go) and web (Vue3). - https://github.com/teal-finance/rainbow
alibaba/Tora: [CVPR'25]Tora: Trajectory-oriented Diffusion Transformer for Video Generation - https://github.com/alibaba/Tora
Dao-AILab/fast-hadamard-transform: Fast Hadamard transform in CUDA, with a PyTorch interface - https://github.com/Dao-AILab/fast-hadamard-transform
Cloud-CV/Fabrik: :factory: Collaboratively build, visualize, and design neural nets in browser - https://github.com/Cloud-CV/Fabrik
Nutlope/blinkshot: A realtime AI image generator - https://github.com/Nutlope/blinkshot
jrieke/traingenerator: üßô A web app to generate template code for machine learning - https://github.com/jrieke/traingenerator
seccomp/libseccomp: The main libseccomp repository - https://github.com/seccomp/libseccomp
brian-team/brian2: Brian is a free, open source simulator for spiking neural networks.  - https://github.com/brian-team/brian2
The-Creator-AI/The-Creator-AI: AI Coding assistant for large and complex codebases. - https://github.com/The-Creator-AI/The-Creator-AI
CH563/gpts-url: ChatGPT GPTs Store, use Astro + Taiwindcss, and crawl the 6,876 GPTs SQL packet - https://github.com/CH563/gpts-url
XanaduAI/blackbird: Blackbird is a quantum assembly language for continuous-variable quantum computation, that can be used to program Xanadu's quantum photonics hardware and Strawberry Fields simulator. - https://github.com/XanaduAI/blackbird
amacaluso/Quantum-Splines-for-Non-Linear-Approximations: This repository contains the code to reproduce the results in the paper Quantum Splines for Non-Linear Approximation, under publication for the ACM International Conference on Computing Frontiers 2020. - https://github.com/amacaluso/Quantum-Splines-for-Non-Linear-Approximations
ymd-h/diffqc: Differentiable Quantum Circuit Simulator for Quantum Machine Learning - https://github.com/ymd-h/diffqc
minnukota381/Quantum-Computing-Qiskit: This repository contains a collection of Jupyter Notebooks demonstrating various quantum computing concepts using Qiskit, a popular quantum computing framework. - https://github.com/minnukota381/Quantum-Computing-Qiskit
ericardomuten/CERN-QGAN: A CERN openlab Summer Student Programme 2021 Project Repository. In this work, Quantum Generative Adversarial Networks are developed to simulate the ttH production processes in the LHC experiment. - https://github.com/ericardomuten/CERN-QGAN
MonitSharma/Learn-Quantum-Computing-For-Free: This Repository contains link to all the free resources to learn Quantum Computing, Maths, Physics etc. - https://github.com/MonitSharma/Learn-Quantum-Computing-For-Free
maximer-v/quantum-machine-learning-finance-cases: Repository to compile real-world gate-based quantum machine learning use cases in the finance sector. - https://github.com/maximer-v/quantum-machine-learning-finance-cases
Winter-Soren/quantum-ml-handbook: This repository consists of documentation regarding quantum machine learning (QML), covering both beginner's guides and advanced topics. - https://github.com/Winter-Soren/quantum-ml-handbook
hanssmail/quantQ: The repository for the Machine Learning and Big Data with kdb+/q book by Novotny et al. - https://github.com/hanssmail/quantQ
