# PYTHON TOOLS OTHER 1 (90 repositories)

NexaAI/nexa-sdk: Run the latest LLMs and VLMs across GPU, NPU, and CPU with bindings for Python, Android Java, and iOS Swift, getting up and running quickly with OpenAI gpt-oss, Gemma 3, Qwen3, and more. - https://github.com/NexaAI/nexa-sdk
spmallick/learnopencv: Learn OpenCV  : C++ and Python Examples - https://github.com/spmallick/learnopencv
GPUOpen-LibrariesAndSDKs/Schola: Schola is a plugin for enabling Reinforcement Learning (RL) in Unreal Engine. It provides tools to help developers create environments, define agents, and connect to python-based RL frameworks such as OpenAI Gym, RLlib or Stable Baselines 3 for training agents with RL. - https://github.com/GPUOpen-LibrariesAndSDKs/Schola
chainstacklabs/grpc-geyser-tutorial: This repository provides Python examples that show how to get live updates from the Solana blockchain using the Yellowstone gRPC plugin - https://github.com/chainstacklabs/grpc-geyser-tutorial
evhub/coconut: Simple, elegant, Pythonic functional programming. - https://github.com/evhub/coconut
pageauc/speed-camera: A Unix, Windows, Raspberry Pi Object Speed Camera using python3, opencv, video streaming, motion tracking.  Includes a Standalone Web Server , Image Search using opencv template match and a whiptail Admin Menu Interface  Includes picam and webcam Plugins for motion track security camera configuration including rclone sync scripts.  - https://github.com/pageauc/speed-camera
dannweeeee/svm-wallet-maker: Python script to bulk-create wallets for Solana and other SVM-based blockchains. - https://github.com/dannweeeee/svm-wallet-maker
niceberginc/agentipy: The #Python framework for connecting AI agents to any onchain app on  @solana-labs  ü§ñüêç - https://github.com/niceberginc/agentipy
shroominic/funcchain: ‚õìÔ∏è build cognitive systems, pythonic - https://github.com/shroominic/funcchain
BlackHC/llm-strategy: Directly Connecting Python to LLMs via Strongly-Typed Functions, Dataclasses, Interfaces & Generic Types - https://github.com/BlackHC/llm-strategy
outspeed-ai/outspeed: Python SDK to build realtime AI applications on voice and video. - https://github.com/outspeed-ai/outspeed
Clarifai/examples: Examples for Clarifai Python SDK and Integrations. Give the repo a star ‚≠ê - https://github.com/Clarifai/examples
taichi-dev/taichi: Productive, portable, and performant GPU programming in Python. - https://github.com/taichi-dev/taichi
jcwill415/Stock_Market_Data_Analysis: Scrape, analyze & visualize stock market data for the S&P500 using Python. Build a basic trading strategy using machine learning to assess company performance and determine buy, sell, hold. Read me & instructions available in Spanish. This is a working repo, with plans to expand the project from technical analysis to fundamental analysis.  - https://github.com/jcwill415/Stock_Market_Data_Analysis
muratcankoylan/AI-Investigator: An automated AI system (Python framework) designed to analyze any type of website content and generate structured reports using Claude 3.5 Sonnet API and Firecrawl. While currently configured for enterprise AI case studies, the architecture can be adapted for various content analysis needs. - https://github.com/muratcankoylan/AI-Investigator
flojoy-ai/studio: Joyful visual programming for Python - https://github.com/flojoy-ai/studio
roelfrenkema/trainplicate: A python application to take care of your FLUX training through the replicate API - https://github.com/roelfrenkema/trainplicate
ifokeev/telegram-ai-agent: Telegram AI Agent: A powerful Python library for creating AI-powered Telegram bots - https://github.com/ifokeev/telegram-ai-agent
AgentOps-AI/agentops: Python SDK for AI agent monitoring, LLM cost tracking, benchmarking, and more. Integrates with most LLMs and agent frameworks including CrewAI, Agno, OpenAI Agents SDK, Langchain, Autogen, AG2, and CamelAI - https://github.com/AgentOps-AI/agentops
jwest951227/tgChatbotAim: Telegram Chat-bot created in python with using AIML - https://github.com/jwest951227/tgChatbotAim
vkgnandhu177/Bayesian-Regression-and-Bitcoin: # Bayesian-Regression-to-Predict-Bitcoin-Price-Variations Predicting the price variations of bitcoin, a virtual cryptographic currency. These predictions could be used as the foundation of a bitcoin trading strategy. To make these predictions, we will have to familiarize ourself with a machine learning technique, Bayesian Regression, and implement this technique in Python.  # Datasets We have the datasets in the data folder. The original raw data can be found here: http://api.bitcoincharts.com/v1/csv/. The datasets from this site have three attributes:   (1) time in epoch,   (2) price in USD per bitcoin, and   (3) bitcoin amount in a transaction (buy/sell).   However, only the first two attributes are relevant to this project.  To make the data to have evenly space records, we took all the records within a 20 second window and replaced it by a single record as the average of all the transaction prices in that window. Not every 20 second window had a record; therefore those missing entries were filled using the prices of the previous 20 observations and assuming a Gaussian distribution. The raw data that has been cleaned is given in the file dataset.csv  Finally, as discussed in the paper, the data was divided into a total of 9 different datasets. The whole dataset is partitioned into three equally sized (50 price variations in each) subsets: train1, train2, and test. The train sets are used for training a linear model, while the test set is for evaluation of the model. There are three csv files associated with each subset of data: *_90.csv, *_180.csv, and *_360.csv. In _90.csv, for example, each line represents a vector of length 90 where the elements are 30 minute worth of bitcoin price variations (since we have 20 second intervals) and a price variation in the 91st column. Similarly, the *_180.csv represents 60 minutes of prices and *_360.csv represents 120 minutes of prices.  # Project Requirements We are expected to implement the Bayesian Regression model to predict the future price variation of bitcoin as described in the reference paper. The main parts to focus on are Equation 6 and the Predicting Price Change section.  # Logic in bitcoin.py 1. Compute the price variations (Œîp1, Œîp2, and Œîp3) for train2 using train1 as input to the Bayesian Regression equation (Equations 6). Make sure to use the similarity metric (Equation 9) in place of the Euclidean distance in Bayesian Regression (Equation 6).  2. Compute the linear regression parameters (w0, w1, w2, w3) by finding the best linear fit (Equation 8). Here you will need to use the ols function of statsmodels.formula.api. Your model should be fit using Œîp1, Œîp2, and Œîp3 as the covariates. Note: the bitcoin order book data was not available, so you do not have to worry about the rw4 term.  3. Use the linear regression model computed in Step 2 and Bayesian Regression estimates, to predict the price variations for the test dataset. Bayesian Regression estimates for test dataset are computed in the same way as they are computed for train2 dataset ‚Äì using train1 as an input.  4. Once the price variations are predicted, compute the mean squared error (MSE) for the test dataset (the test dataset has 50 vectors => 50 predictions). - https://github.com/vkgnandhu177/Bayesian-Regression-and-Bitcoin
BerriAI/litellm: Python SDK, Proxy Server (LLM Gateway) to call 100+ LLM APIs in OpenAI format - [Bedrock, Azure, OpenAI, VertexAI, Cohere, Anthropic, Sagemaker, HuggingFace, Replicate, Groq] - https://github.com/BerriAI/litellm
quantumlib/qsim: Fast C++ and Python library for state-vector simulation of quantum circuits. - https://github.com/quantumlib/qsim
XanaduAI/strawberryfields: Strawberry Fields is a full-stack Python library for designing, simulating, and optimizing continuous variable (CV) quantum optical circuits. - https://github.com/XanaduAI/strawberryfields
quantumlib/OpenFermion: Python package for compiling and analyzing quantum algorithms to simulate electronic structures. - https://github.com/quantumlib/OpenFermion
PennyLaneAI/pennylane: PennyLane is a cross-platform Python library for quantum computing, quantum machine learning, and quantum chemistry. Built by researchers, for research.  - https://github.com/PennyLaneAI/pennylane
quantumlib/Cirq: Python framework for creating, editing, and invoking Noisy Intermediate-Scale Quantum (NISQ) circuits. - https://github.com/quantumlib/Cirq
weavechain/weave-py-api: Weavechain Python API - https://github.com/weavechain/weave-py-api
rezafotohi/FedAnil: FedAnil is a secure blockchain-enabled Federated Deep Learning Model to address non-IID data and privacy concerns. This repo hosts a simulation for FedAnil written in Python. - https://github.com/rezafotohi/FedAnil
ScottfreeLLC/AlphaPy: Python AutoML for Trading Systems and Sports Betting - https://github.com/ScottfreeLLC/AlphaPy
man-group/ArcticDB: ArcticDB is a high performance, serverless DataFrame database built for the Python Data Science ecosystem. - https://github.com/man-group/ArcticDB
NVIDIA/cuda-quantum: C++ and Python support for the CUDA Quantum programming model for heterogeneous quantum-classical workflows - https://github.com/NVIDIA/cuda-quantum
data61/python-paillier: A library for Partially Homomorphic Encryption in Python - https://github.com/data61/python-paillier
jialuechen/windtunnel: Python Market Simulation Engine Built on top of Generative AI - https://github.com/jialuechen/windtunnel
yym68686/ChatGPT-Telegram-Bot: TeleChat: ü§ñÔ∏è an AI chat Telegram bot can Web Search Powered by GPT-5, DALL¬∑E , Groq, Gemini 2.5 Pro/Flash and the official Claude4.1 API using Python on Zeabur, fly.io and Replit. - https://github.com/yym68686/ChatGPT-Telegram-Bot
zama-ai/concrete: Concrete: TFHE Compiler that converts python programs into FHE equivalent - https://github.com/zama-ai/concrete
taskforcesh/bullmq: BullMQ - Message Queue and Batch processing for NodeJS and Python based on Redis - https://github.com/taskforcesh/bullmq
nmweaver/soltrade: Python trading bot using the Solana blockchain. - https://github.com/nmweaver/soltrade
zkonduit/ezkl: ezkl is an engine for doing inference for deep learning models and other computational graphs in a zk-snark (ZKML). Use it from Python, Javascript, or the command line.  - https://github.com/zkonduit/ezkl
paradigmxyz/cryo: cryo is the easiest way to extract blockchain data to parquet, csv, json, or python dataframes - https://github.com/paradigmxyz/cryo
Ackee-Blockchain/wake: Wake is a Python-based Solidity development and testing framework with built-in vulnerability detectors - https://github.com/Ackee-Blockchain/wake
plotly/plotly.py: The interactive graphing library for Python :sparkles: - https://github.com/plotly/plotly.py
betterenvi/gSpan: Python implementation of frequent subgraph mining algorithm gSpan. Directed graphs are supported. - https://github.com/betterenvi/gSpan
cryoem-uoft/cryosparc-tools: Python library that enables scripting access to CryoSPARC, a cryo-EM software package. - https://github.com/cryoem-uoft/cryosparc-tools
spadebuilders/awesome-vyper: An Awesome List: curated resources for Vyper, the Pythonic smart contract language for the EVM - https://github.com/spadebuilders/awesome-vyper
ccxt/ccxt: A cryptocurrency trading API with more than 100 exchanges in JavaScript / TypeScript / Python / C# / PHP / Go  - https://github.com/ccxt/ccxt
aburi6800/Python-OnyxOfBlack: A retro 3D dungeon role-playing game made in Python. - https://github.com/aburi6800/Python-OnyxOfBlack
kris-classes/pyxel-snippets: Small snippets for the Python retro game engine - https://github.com/kris-classes/pyxel-snippets
pikulet/connection-sprites: 16-bit sprites for tmgc v4 connection non-adults on a white background (pyxres, python/c++) - https://github.com/pikulet/connection-sprites
kitao/pyxel: A retro game engine for Python - https://github.com/kitao/pyxel
wasmerio/wasmer-python: üêçüï∏ WebAssembly runtime for Python - https://github.com/wasmerio/wasmer-python
plasma-umass/scalene: Scalene: a high-performance, high-precision CPU, GPU, and memory profiler for Python with AI-powered optimization proposals - https://github.com/plasma-umass/scalene
NicholasMamo/multiplex-plot: Multiplex: visualizations that tell stories‚ÄîA Python library to create and annotate beautiful network graph visualizations, text visualizations and more. - https://github.com/NicholasMamo/multiplex-plot
ddoroshev/multifetcher: üöÄ High-performance server for concurrent fetching from multiple web resources üåê, built with Python's üêç async capabilities. - https://github.com/ddoroshev/multifetcher
cypherpunk-symposium/web3-starter-py: üëæ blockchain starting kit - python edition - https://github.com/cypherpunk-symposium/web3-starter-py
segevfiner/pybpf_asm: Python BPF Assembler - https://github.com/segevfiner/pybpf_asm
AgnostiqHQ/covalent: Pythonic tool for orchestrating machine-learning/high performance/quantum-computing workflows in heterogeneous compute environments. - https://github.com/AgnostiqHQ/covalent
crypto-lake/lake-api: Python API for accessing Lake high frequency tick trades & order book data - https://github.com/crypto-lake/lake-api
pyca/cryptography: cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. - https://github.com/pyca/cryptography
guptarohit/cryptoCMD: Cryptocurrency historical price data library in Python. Data from https://coinmarketcap.com. - https://github.com/guptarohit/cryptoCMD
areed1192/finance-news-aggregator: A news aggregator in python, that focuses primarily on business and market news sources. - https://github.com/areed1192/finance-news-aggregator
Santandersecurityresearch/QuantumRNG: A Quantum computer based CSPRNG, written in python, as a PoC for using QCs in services. - https://github.com/Santandersecurityresearch/QuantumRNG
HarryR/solcrypto: Solidity crypto libraries, ring signatures, proof of knowledge, packed signatures etc. with matching Python implementations for secp256k1 and (alt)BN-256 - https://github.com/HarryR/solcrypto
capeprivacy/hybrid-pke: The Hybrid Public Key Encryption (HPKE) standard in Python - https://github.com/capeprivacy/hybrid-pke
Crypto-toolbox/HFT-Orderbook: Limit Order Book for high-frequency trading (HFT), as described by WK Selph, implemented in Python3 and C - https://github.com/Crypto-toolbox/HFT-Orderbook
blockchain-etl/ethereum-etl: Python scripts for ETL (extract, transform and load) jobs for Ethereum blocks, transactions, ERC20 / ERC721 tokens, transfers, receipts, logs, contracts, internal transactions. Data is available in Google BigQuery https://goo.gl/oY5BCQ - https://github.com/blockchain-etl/ethereum-etl
BlazingDB/blazingsql: BlazingSQL is a lightweight, GPU accelerated, SQL engine for Python. Built on RAPIDS cuDF. - https://github.com/BlazingDB/blazingsql
jamesray1/sharding: Sharding utils in Vyper/Python - https://github.com/jamesray1/sharding
navig-me/telert: Command‚Äëline and Python utility that alerts on command completion, code execution and system monitoring events - https://github.com/navig-me/telert
underneathall/pinferencia: Python + Inference - Model Deployment library in Python. Simplest model inference server ever. - https://github.com/underneathall/pinferencia
ShokofehVS/SeCCA: Secured Cheng and Church Algorithm performs encrypted computations such as sum, or matrix multiplication in Python for biclustering algorithm - https://github.com/ShokofehVS/SeCCA
AnshumanFauzdar/telegram-bot-heroku-deploy: Detailed guide to initially deploy a simple telegram python bot to heroku - https://github.com/AnshumanFauzdar/telegram-bot-heroku-deploy
awslabs/gluonts: Probabilistic time series modeling in Python - https://github.com/awslabs/gluonts
bregman-arie/devops-exercises: Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions - https://github.com/bregman-arie/devops-exercises
Bohdan-Khomtchouk/FTPwalker: PyPI package for traversing extremely large FTP directory trees - https://github.com/Bohdan-Khomtchouk/FTPwalker
ideawu/cpy:  Cpy provides you a way to write Python codes in C syntax! 	 - https://github.com/ideawu/cpy
micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems - https://github.com/micropython/micropython
joernio/joern: Open-source code analysis platform for C/C++/Java/Binary/Javascript/Python/Kotlin based on code property graphs. Discord https://discord.gg/vv4MH284Hc - https://github.com/joernio/joern
ashvardanian/SimSIMD: Up to 200x Faster Dot Products & Similarity Metrics ‚Äî for Python, Rust, C, JS, and Swift, supporting f64, f32, f16 real & complex, i8, and bit vectors using SIMD for both AVX2, AVX-512, NEON, SVE, & SVE2 üìê - https://github.com/ashvardanian/SimSIMD
nersent/qpace: üìä The Quant SDK for Python and Javascript. Written in Rust. - https://github.com/nersent/qpace
graphistry/pygraphistry: PyGraphistry is a Python library to quickly load, shape, embed, and explore big graphs with the GPU-accelerated Graphistry visual graph analyzer - https://github.com/graphistry/pygraphistry
erg-lang/erg: A statically typed language compatible with Python - https://github.com/erg-lang/erg
chronoxor/FastBinaryEncoding: Fast Binary Encoding is ultra fast and universal serialization solution for C++, C#, Go, Java, JavaScript, Kotlin, Python, Ruby, Swift - https://github.com/chronoxor/FastBinaryEncoding
sfu-db/connector-x: Fastest library to load data from DB to DataFrames in Rust and Python - https://github.com/sfu-db/connector-x
kaitai-io/kaitai_struct: Kaitai Struct: declarative language to generate binary data parsers in C++ / C# / Go / Java / JavaScript / Lua / Nim / Perl / PHP / Python / Ruby / Rust - https://github.com/kaitai-io/kaitai_struct
ROCm/mxnet: Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Scala, Go, Javascript and more - https://github.com/ROCm/mxnet
aceinnolab/Inkycal: Create awesome e-paper dashboards within minutes! Modularity? Check! Python3? Check? Works on Raspberry Pi Zero W? Check! Support for own modules? Check!  - https://github.com/aceinnolab/Inkycal
NetEase-Media/grps: Deep Learning Deployment Framework: Supports tf/torch/trt/trtllm/vllm and other NN frameworks. Support dynamic batching, and streaming modes. It is dual-language compatible with Python and C++, offering scalability, extensibility, and high performance. It helps users quickly deploy models and provide services through HTTP/RPC interfaces. - https://github.com/NetEase-Media/grps
bytedance/deer-flow: DeerFlow is a community-driven Deep Research framework, combining language models with tools like web search, crawling, and Python execution, while contributing back to the open-source community. - https://github.com/bytedance/deer-flow
aartaka/pretty.c: Making C Look ‚ú®Pretty‚ú®and Lua/Lisp/Python-esque - https://github.com/aartaka/pretty.c
